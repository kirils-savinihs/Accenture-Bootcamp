1
2              _____ _             ____      _   _              _           _
3             |_   _| |__   ___   / ___|__ _| |_| |__   ___  __| |_ __ __ _| |
4               | | | '_ \ / _ \ | |   / _' | __| '_ \ / _ \/ _' | '__/ _' | |
5               | | | | | |  __/ | |__| (_| | |_| | | |  __/ (_| | | | (_| | |
6               |_| |_| |_|\___|  \____\__,_|\__|_| |_|\___|\__,_|_|  \__,_|_|
7                           _   _   _            ____
8            __ _ _ __   __| | | |_| |__   ___  | __ )  __ _ ______ _  __ _ _ __
9           / _' | '_ \ / _' | | __| '_ \ / _ \ |  _ \ / _' |_  / _' |/ _' | '__|
10         | (_| | | | | (_| | | |_| | | |  __/ | |_) | (_| |/ / (_| | (_| | |
11          \__,_|_| |_|\__,_|  \__|_| |_|\___| |____/ \__,_/___\__,_|\__,_|_|
12
13                                    Eric Steven Raymond
14
15    Permission is granted to copy, distribute and/or modify this document under the terms of
16    the Open Publication License, version 2.0.
17
18    http://www.catb.org/esr/writings/cathedral-bazaar/cathedral-bazaar/
19
20    Date: 2002/08/02 09:02:14
21
22    = Abstract =
23
24    I anatomize a successful open-source project, fetchmail, that was run as a deliberate test of the
25    surprising theories about software engineering suggested by the history of Linux. I discuss these
26    theories in terms of two fundamentally different development styles, the "cathedral" model of most
27    of the commercial world versus the "bazaar" model of the Linux world. I show that these models
28    derive from opposing assumptions about the nature of the software-debugging task.  I then make a
29    sustained argument from the Linux experience for the proposition that "Given enough eyeballs, all
30    bugs are shallow", suggest productive analogies with other self-correcting systems of selfish
31    agents, and conclude with some exploration of the implications of this insight for the future of
32    software.
33
34    = The Cathedral and the Bazaar =
35
36    Linux is subversive. Who would have thought even five years ago (1991) that a world-class operating
37    system could coalesce as if by magic out of part-time hacking by several thousand developers
38    scattered all over the planet, connected only by the tenuous strands of the Internet?
39
40    Certainly not I. By the time Linux swam onto my radar screen in early 1993, I had already been
41    involved in Unix and open-source development for ten years. I was one of the first GNU contributors
42    in the mid-1980s. I had released a good deal of open-source software onto the net, developing or
43    co-developing several programs (nethack, Emacs's VC and GUD modes, xlife, and others) that are still
44    in wide use today. I thought I knew how it was done.
45
46    Linux overturned much of what I thought I knew. I had been preaching the Unix gospel of small tools,
47    rapid prototyping and evolutionary programming for years. But I also believed there was a certain
48    critical complexity above which a more centralized, a priori approach was required. I believed that
49    the most important software (operating systems and really large tools like the Emacs programming
50    editor) needed to be built like cathedrals, carefully crafted by individual wizards or small bands
51    of mages working in splendid isolation, with no beta to be released before its time.
52
53    Linus Torvalds's style of development—release early and often, delegate everything you can, be open
54    to the point of promiscuity—came as a surprise. No quiet, reverent cathedral-building here—rather,
55    the Linux community seemed to resemble a great babbling bazaar of differing agendas and approaches
56    (aptly symbolized by the Linux archive sites, who'd take submissions from anyone) out of which a
57    coherent and stable system could seemingly emerge only by a succession of miracles.
58
59    The fact that this bazaar style seemed to work, and work well, came as a distinct shock. As I
60    learned my way around, I worked hard not just at individual projects, but also at trying to
61    understand why the Linux world not only didn't fly apart in confusion but seemed to go from strength
62    to strength at a speed barely imaginable to cathedral-builders.
63
64    By mid-1996 I thought I was beginning to understand. Chance handed me a perfect way to test my
65    theory, in the form of an open-source project that I could consciously try to run in the bazaar
66    style. So I did—and it was a significant success.
67
68    This is the story of that project. I'll use it to propose some aphorisms about effective open-source
69    development. Not all of these are things I first learned in the Linux world, but we'll see how the
70    Linux world gives them particular point. If I'm correct, they'll help you understand exactly what it
71    is that makes the Linux community such a fountain of good software—and, perhaps, they will help you
72    become more productive yourself.
73
74    = The Mail Must Get Through =
